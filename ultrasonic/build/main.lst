ARM GAS  /tmp/ccHn8d2e.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.DelayUs,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	DelayUs:
  23              	.LFB65:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "tim.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/ccHn8d2e.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** #define ARRAYSIZE(a)  (sizeof(a) / sizeof((a)[0]))
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN PV */
  49:Src/main.c    **** static __IO uint32_t g_timerMs = 0;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END PV */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  54:Src/main.c    **** void SystemClock_Config(void);
  55:Src/main.c    **** /* USER CODE BEGIN PFP */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PFP */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN 0 */
  61:Src/main.c    **** static void DelayUs(uint32_t us)
  62:Src/main.c    **** {
  25              		.loc 1 62 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  63:Src/main.c    ****   if (us > 0)
  31              		.loc 1 63 0
  32 0000 60B1     		cbz	r0, .L8
  62:Src/main.c    ****   if (us > 0)
  33              		.loc 1 62 0
  34 0002 10B4     		push	{r4}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 4, -4
  38 0004 0446     		mov	r4, r0
  39              	.LBB2:
  64:Src/main.c    ****   {
  65:Src/main.c    ****     uint32_t start = SysTick->VAL;
  40              		.loc 1 65 0
  41 0006 064B     		ldr	r3, .L9
  42 0008 9868     		ldr	r0, [r3, #8]
  43              	.LVL1:
  44              	.L3:
  66:Src/main.c    ****     while (SysTick->VAL + us * 72 >= start);
  45              		.loc 1 66 0 discriminator 1
  46 000a 054B     		ldr	r3, .L9
  47 000c 9B68     		ldr	r3, [r3, #8]
  48 000e 04EBC401 		add	r1, r4, r4, lsl #3
ARM GAS  /tmp/ccHn8d2e.s 			page 3


  49 0012 CA00     		lsls	r2, r1, #3
  50 0014 1344     		add	r3, r3, r2
  51 0016 9842     		cmp	r0, r3
  52 0018 F7D9     		bls	.L3
  53              	.LBE2:
  67:Src/main.c    ****   }
  68:Src/main.c    **** }
  54              		.loc 1 68 0
  55 001a 10BC     		pop	{r4}
  56              	.LCFI1:
  57              		.cfi_restore 4
  58              		.cfi_def_cfa_offset 0
  59              	.LVL2:
  60              	.L8:
  61 001c 7047     		bx	lr
  62              	.L10:
  63 001e 00BF     		.align	2
  64              	.L9:
  65 0020 10E000E0 		.word	-536813552
  66              		.cfi_endproc
  67              	.LFE65:
  69              		.section	.text.HC_SR04_Read,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  76              	HC_SR04_Read:
  77              	.LFB66:
  69:Src/main.c    **** 
  70:Src/main.c    **** static uint32_t HC_SR04_Read(void)
  71:Src/main.c    **** {
  78              		.loc 1 71 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82 0000 38B5     		push	{r3, r4, r5, lr}
  83              	.LCFI2:
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 3, -16
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 5, -8
  88              		.cfi_offset 14, -4
  89              	.LVL3:
  72:Src/main.c    ****   uint32_t startMs = 0;
  73:Src/main.c    ****   GPIO_PinState echo = GPIO_PIN_RESET;
  74:Src/main.c    **** 
  75:Src/main.c    ****   HAL_GPIO_WritePin(HC_SR04_TRIG_GPIO_Port, HC_SR04_TRIG_Pin, GPIO_PIN_SET);
  90              		.loc 1 75 0
  91 0002 224C     		ldr	r4, .L19
  92 0004 0122     		movs	r2, #1
  93 0006 1021     		movs	r1, #16
  94 0008 2046     		mov	r0, r4
  95 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  96              	.LVL4:
  76:Src/main.c    ****   DelayUs(20);
  97              		.loc 1 76 0
ARM GAS  /tmp/ccHn8d2e.s 			page 4


  98 000e 1420     		movs	r0, #20
  99 0010 FFF7FEFF 		bl	DelayUs
 100              	.LVL5:
  77:Src/main.c    ****   HAL_GPIO_WritePin(HC_SR04_TRIG_GPIO_Port, HC_SR04_TRIG_Pin, GPIO_PIN_RESET);
 101              		.loc 1 77 0
 102 0014 0022     		movs	r2, #0
 103 0016 1021     		movs	r1, #16
 104 0018 2046     		mov	r0, r4
 105 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL6:
  78:Src/main.c    ****   DelayUs(20);
 107              		.loc 1 78 0
 108 001e 1420     		movs	r0, #20
 109 0020 FFF7FEFF 		bl	DelayUs
 110              	.LVL7:
  79:Src/main.c    **** 
  80:Src/main.c    ****   startMs = HAL_GetTick();
 111              		.loc 1 80 0
 112 0024 FFF7FEFF 		bl	HAL_GetTick
 113              	.LVL8:
 114 0028 0546     		mov	r5, r0
 115              	.LVL9:
 116              	.L13:
  81:Src/main.c    ****   do
  82:Src/main.c    ****   {
  83:Src/main.c    ****     echo = HAL_GPIO_ReadPin(HC_SR04_ECHO_GPIO_Port, HC_SR04_ECHO_Pin);
 117              		.loc 1 83 0 discriminator 2
 118 002a 2021     		movs	r1, #32
 119 002c 1748     		ldr	r0, .L19
 120 002e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 121              	.LVL10:
  84:Src/main.c    ****   } while ((GPIO_PIN_RESET == echo) && (HAL_GetTick() < startMs + 1));
 122              		.loc 1 84 0 discriminator 2
 123 0032 0446     		mov	r4, r0
 124 0034 20B9     		cbnz	r0, .L12
 125              		.loc 1 84 0 is_stmt 0 discriminator 1
 126 0036 FFF7FEFF 		bl	HAL_GetTick
 127              	.LVL11:
 128 003a 6B1C     		adds	r3, r5, #1
 129 003c 9842     		cmp	r0, r3
 130 003e F4D3     		bcc	.L13
 131              	.L12:
  85:Src/main.c    **** 
  86:Src/main.c    ****   if (GPIO_PIN_RESET == echo)
 132              		.loc 1 86 0 is_stmt 1
 133 0040 14B9     		cbnz	r4, .L18
  87:Src/main.c    ****   {
  88:Src/main.c    ****     return UINT32_MAX;
 134              		.loc 1 88 0
 135 0042 4FF0FF30 		mov	r0, #-1
  89:Src/main.c    ****   }
  90:Src/main.c    ****   else
  91:Src/main.c    ****   {
  92:Src/main.c    ****     uint32_t startMs = 0;
  93:Src/main.c    ****     uint32_t startUs = 0;
  94:Src/main.c    ****     uint32_t timeUs = 0;
  95:Src/main.c    **** 
ARM GAS  /tmp/ccHn8d2e.s 			page 5


  96:Src/main.c    ****     startMs = HAL_GetTick();
  97:Src/main.c    ****     startUs = SysTick->VAL;
  98:Src/main.c    ****     while (GPIO_PIN_SET == HAL_GPIO_ReadPin(HC_SR04_ECHO_Pin, HC_SR04_ECHO_Pin));
  99:Src/main.c    ****     timeUs = (HAL_GetTick() - startMs) * 1000 + (startUs - SysTick->VAL) / 72;
 100:Src/main.c    **** 
 101:Src/main.c    ****     return timeUs * 170 / 1000;
 102:Src/main.c    ****   }
 103:Src/main.c    **** }
 136              		.loc 1 103 0
 137 0046 38BD     		pop	{r3, r4, r5, pc}
 138              	.LVL12:
 139              	.L18:
 140              	.LBB3:
  96:Src/main.c    ****     startUs = SysTick->VAL;
 141              		.loc 1 96 0
 142 0048 FFF7FEFF 		bl	HAL_GetTick
 143              	.LVL13:
 144 004c 0546     		mov	r5, r0
 145              	.LVL14:
  97:Src/main.c    ****     while (GPIO_PIN_SET == HAL_GPIO_ReadPin(HC_SR04_ECHO_Pin, HC_SR04_ECHO_Pin));
 146              		.loc 1 97 0
 147 004e 104B     		ldr	r3, .L19+4
 148 0050 9C68     		ldr	r4, [r3, #8]
 149              	.LVL15:
 150              	.L15:
  98:Src/main.c    ****     timeUs = (HAL_GetTick() - startMs) * 1000 + (startUs - SysTick->VAL) / 72;
 151              		.loc 1 98 0 discriminator 1
 152 0052 2021     		movs	r1, #32
 153 0054 0846     		mov	r0, r1
 154 0056 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 155              	.LVL16:
 156 005a 0128     		cmp	r0, #1
 157 005c F9D0     		beq	.L15
  99:Src/main.c    **** 
 158              		.loc 1 99 0
 159 005e FFF7FEFF 		bl	HAL_GetTick
 160              	.LVL17:
 161 0062 401B     		subs	r0, r0, r5
 162 0064 0A4B     		ldr	r3, .L19+4
 163 0066 9B68     		ldr	r3, [r3, #8]
 164 0068 E31A     		subs	r3, r4, r3
 165 006a 0A4A     		ldr	r2, .L19+8
 166 006c A2FB0323 		umull	r2, r3, r2, r3
 167 0070 1B09     		lsrs	r3, r3, #4
 168 0072 4FF47A72 		mov	r2, #1000
 169 0076 02FB0033 		mla	r3, r2, r0, r3
 170              	.LVL18:
 101:Src/main.c    ****   }
 171              		.loc 1 101 0
 172 007a AA20     		movs	r0, #170
 173 007c 00FB03F0 		mul	r0, r0, r3
 174 0080 054B     		ldr	r3, .L19+12
 175              	.LVL19:
 176 0082 A3FB0030 		umull	r3, r0, r3, r0
 177 0086 8009     		lsrs	r0, r0, #6
 178 0088 38BD     		pop	{r3, r4, r5, pc}
 179              	.LVL20:
ARM GAS  /tmp/ccHn8d2e.s 			page 6


 180              	.L20:
 181 008a 00BF     		.align	2
 182              	.L19:
 183 008c 00080140 		.word	1073809408
 184 0090 10E000E0 		.word	-536813552
 185 0094 398EE338 		.word	954437177
 186 0098 D34D6210 		.word	274877907
 187              	.LBE3:
 188              		.cfi_endproc
 189              	.LFE66:
 191              		.section	.text.HC_SR04_GetDistance,"ax",%progbits
 192              		.align	1
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu softvfp
 198              	HC_SR04_GetDistance:
 199              	.LFB67:
 104:Src/main.c    **** 
 105:Src/main.c    **** static uint32_t HC_SR04_GetDistance(void)
 106:Src/main.c    **** {
 200              		.loc 1 106 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 10B5     		push	{r4, lr}
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209              	.LVL21:
 107:Src/main.c    ****   static uint32_t distances[] = {0, 0, 0, 0, 0};
 108:Src/main.c    ****   static size_t current = UINT32_MAX;
 109:Src/main.c    ****   size_t minIdx = 0;
 110:Src/main.c    ****   size_t maxIdx = 0;
 111:Src/main.c    ****   uint32_t sum = 0;
 112:Src/main.c    **** 
 113:Src/main.c    ****   if (current >= ARRAYSIZE(distances))
 210              		.loc 1 113 0
 211 0002 274B     		ldr	r3, .L43
 212 0004 1C68     		ldr	r4, [r3]
 213 0006 042C     		cmp	r4, #4
 214 0008 10D9     		bls	.L38
 215 000a 0024     		movs	r4, #0
 216 000c 05E0     		b	.L22
 217              	.LVL22:
 218              	.L24:
 219              	.LBB4:
 114:Src/main.c    ****   {
 115:Src/main.c    ****     for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 116:Src/main.c    ****     {
 117:Src/main.c    ****       distances[i] = HC_SR04_Read();
 220              		.loc 1 117 0 discriminator 3
 221 000e FFF7FEFF 		bl	HC_SR04_Read
 222              	.LVL23:
 223 0012 244B     		ldr	r3, .L43+4
 224 0014 43F82400 		str	r0, [r3, r4, lsl #2]
ARM GAS  /tmp/ccHn8d2e.s 			page 7


 115:Src/main.c    ****     {
 225              		.loc 1 115 0 discriminator 3
 226 0018 0134     		adds	r4, r4, #1
 227              	.LVL24:
 228              	.L22:
 115:Src/main.c    ****     {
 229              		.loc 1 115 0 is_stmt 0 discriminator 1
 230 001a 042C     		cmp	r4, #4
 231 001c F7D9     		bls	.L24
 232              	.LBE4:
 118:Src/main.c    ****     }
 119:Src/main.c    ****     current = 0;
 233              		.loc 1 119 0 is_stmt 1
 234 001e 0022     		movs	r2, #0
 235 0020 1F4B     		ldr	r3, .L43
 236 0022 1A60     		str	r2, [r3]
 237              	.LVL25:
 238              	.L25:
 239              	.LBB5:
 120:Src/main.c    ****   }
 121:Src/main.c    ****   else
 122:Src/main.c    ****   {
 123:Src/main.c    ****     distances[current] = HC_SR04_Read();
 124:Src/main.c    ****     if (++current >= ARRAYSIZE(distances))
 125:Src/main.c    ****     {
 126:Src/main.c    ****       current = 0;
 127:Src/main.c    ****     }
 128:Src/main.c    ****   }
 129:Src/main.c    **** 
 130:Src/main.c    ****   minIdx = 0;
 131:Src/main.c    ****   maxIdx = 0;
 132:Src/main.c    ****   for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 240              		.loc 1 132 0
 241 0024 0023     		movs	r3, #0
 242              	.LBE5:
 131:Src/main.c    ****   for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 243              		.loc 1 131 0
 244 0026 1C46     		mov	r4, r3
 130:Src/main.c    ****   maxIdx = 0;
 245              		.loc 1 130 0
 246 0028 1946     		mov	r1, r3
 247              	.LBB6:
 248              		.loc 1 132 0
 249 002a 10E0     		b	.L26
 250              	.LVL26:
 251              	.L38:
 252              	.LBE6:
 123:Src/main.c    ****     if (++current >= ARRAYSIZE(distances))
 253              		.loc 1 123 0
 254 002c FFF7FEFF 		bl	HC_SR04_Read
 255              	.LVL27:
 256 0030 1C4B     		ldr	r3, .L43+4
 257 0032 43F82400 		str	r0, [r3, r4, lsl #2]
 124:Src/main.c    ****     {
 258              		.loc 1 124 0
 259 0036 1A4A     		ldr	r2, .L43
 260 0038 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccHn8d2e.s 			page 8


 261 003a 0133     		adds	r3, r3, #1
 262 003c 1360     		str	r3, [r2]
 263 003e 042B     		cmp	r3, #4
 264 0040 F0D9     		bls	.L25
 126:Src/main.c    ****     }
 265              		.loc 1 126 0
 266 0042 0022     		movs	r2, #0
 267 0044 164B     		ldr	r3, .L43
 268 0046 1A60     		str	r2, [r3]
 269 0048 ECE7     		b	.L25
 270              	.LVL28:
 271              	.L34:
 272              	.LBB7:
 133:Src/main.c    ****   {
 134:Src/main.c    ****     if (distances[i] < distances[minIdx])
 135:Src/main.c    ****     {
 136:Src/main.c    ****       minIdx = i;
 273              		.loc 1 136 0
 274 004a 1946     		mov	r1, r3
 275              	.LVL29:
 276              	.L27:
 132:Src/main.c    ****   {
 277              		.loc 1 132 0 discriminator 2
 278 004c 0133     		adds	r3, r3, #1
 279              	.LVL30:
 280              	.L26:
 132:Src/main.c    ****   {
 281              		.loc 1 132 0 is_stmt 0 discriminator 1
 282 004e 042B     		cmp	r3, #4
 283 0050 0DD8     		bhi	.L39
 134:Src/main.c    ****     {
 284              		.loc 1 134 0 is_stmt 1
 285 0052 144A     		ldr	r2, .L43+4
 286 0054 52F82300 		ldr	r0, [r2, r3, lsl #2]
 287 0058 52F82120 		ldr	r2, [r2, r1, lsl #2]
 288 005c 9042     		cmp	r0, r2
 289 005e F4D3     		bcc	.L34
 137:Src/main.c    ****     }
 138:Src/main.c    ****     else
 139:Src/main.c    ****     {
 140:Src/main.c    ****       if (distances[i] > distances[maxIdx])
 290              		.loc 1 140 0
 291 0060 104A     		ldr	r2, .L43+4
 292 0062 52F82420 		ldr	r2, [r2, r4, lsl #2]
 293 0066 9042     		cmp	r0, r2
 294 0068 F0D9     		bls	.L27
 141:Src/main.c    ****       {
 142:Src/main.c    ****         maxIdx = i;
 295              		.loc 1 142 0
 296 006a 1C46     		mov	r4, r3
 297              	.LVL31:
 298 006c EEE7     		b	.L27
 299              	.LVL32:
 300              	.L39:
 301              	.LBE7:
 143:Src/main.c    ****       }
 144:Src/main.c    ****     }
ARM GAS  /tmp/ccHn8d2e.s 			page 9


 145:Src/main.c    ****   }
 146:Src/main.c    ****   if (minIdx == maxIdx)
 302              		.loc 1 146 0
 303 006e A142     		cmp	r1, r4
 304 0070 02D0     		beq	.L40
 305              	.L29:
 306              	.LVL33:
 307              	.LBB8:
 147:Src/main.c    ****   {
 148:Src/main.c    ****     ++maxIdx;
 149:Src/main.c    ****   }
 150:Src/main.c    **** 
 151:Src/main.c    ****   sum = 0;
 152:Src/main.c    ****   for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 308              		.loc 1 152 0
 309 0072 0023     		movs	r3, #0
 310              	.LVL34:
 311              	.LBE8:
 151:Src/main.c    ****   for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 312              		.loc 1 151 0
 313 0074 1846     		mov	r0, r3
 314              	.LBB9:
 315              		.loc 1 152 0
 316 0076 06E0     		b	.L30
 317              	.LVL35:
 318              	.L40:
 319              	.LBE9:
 148:Src/main.c    ****   }
 320              		.loc 1 148 0
 321 0078 0134     		adds	r4, r4, #1
 322              	.LVL36:
 323 007a FAE7     		b	.L29
 324              	.LVL37:
 325              	.L42:
 326              	.LBB10:
 153:Src/main.c    ****   {
 154:Src/main.c    ****     if ((i != minIdx) && (i != maxIdx))
 155:Src/main.c    ****     {
 156:Src/main.c    ****       sum += distances[i];
 327              		.loc 1 156 0
 328 007c 094A     		ldr	r2, .L43+4
 329 007e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 330 0082 1044     		add	r0, r0, r2
 331              	.LVL38:
 332              	.L31:
 152:Src/main.c    ****   {
 333              		.loc 1 152 0 discriminator 2
 334 0084 0133     		adds	r3, r3, #1
 335              	.LVL39:
 336              	.L30:
 152:Src/main.c    ****   {
 337              		.loc 1 152 0 is_stmt 0 discriminator 1
 338 0086 042B     		cmp	r3, #4
 339 0088 04D8     		bhi	.L41
 154:Src/main.c    ****     {
 340              		.loc 1 154 0 is_stmt 1
 341 008a 9942     		cmp	r1, r3
ARM GAS  /tmp/ccHn8d2e.s 			page 10


 342 008c FAD0     		beq	.L31
 154:Src/main.c    ****     {
 343              		.loc 1 154 0 is_stmt 0 discriminator 1
 344 008e 9C42     		cmp	r4, r3
 345 0090 F4D1     		bne	.L42
 346 0092 F7E7     		b	.L31
 347              	.L41:
 348              	.LBE10:
 157:Src/main.c    ****     }
 158:Src/main.c    ****   }
 159:Src/main.c    **** 
 160:Src/main.c    ****   return sum / (ARRAYSIZE(distances) - 2);
 349              		.loc 1 160 0 is_stmt 1
 350 0094 044B     		ldr	r3, .L43+8
 351              	.LVL40:
 352 0096 A3FB0030 		umull	r3, r0, r3, r0
 353              	.LVL41:
 161:Src/main.c    **** }
 354              		.loc 1 161 0
 355 009a 4008     		lsrs	r0, r0, #1
 356 009c 10BD     		pop	{r4, pc}
 357              	.LVL42:
 358              	.L44:
 359 009e 00BF     		.align	2
 360              	.L43:
 361 00a0 00000000 		.word	.LANCHOR0
 362 00a4 00000000 		.word	.LANCHOR1
 363 00a8 ABAAAAAA 		.word	-1431655765
 364              		.cfi_endproc
 365              	.LFE67:
 367              		.section	.text.SystemClock_Config,"ax",%progbits
 368              		.align	1
 369              		.global	SystemClock_Config
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu softvfp
 375              	SystemClock_Config:
 376              	.LFB69:
 162:Src/main.c    **** 
 163:Src/main.c    **** /* USER CODE END 0 */
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
 166:Src/main.c    ****   * @brief  The application entry point.
 167:Src/main.c    ****   * @retval int
 168:Src/main.c    ****   */
 169:Src/main.c    **** int main(void)
 170:Src/main.c    **** {
 171:Src/main.c    ****   /* USER CODE BEGIN 1 */
 172:Src/main.c    **** 
 173:Src/main.c    ****   /* USER CODE END 1 */
 174:Src/main.c    ****   
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 177:Src/main.c    **** 
 178:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 179:Src/main.c    ****   HAL_Init();
ARM GAS  /tmp/ccHn8d2e.s 			page 11


 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE BEGIN Init */
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* USER CODE END Init */
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* Configure the system clock */
 186:Src/main.c    ****   SystemClock_Config();
 187:Src/main.c    **** 
 188:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* USER CODE END SysInit */
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* Initialize all configured peripherals */
 193:Src/main.c    ****   MX_GPIO_Init();
 194:Src/main.c    ****   MX_TIM2_Init();
 195:Src/main.c    ****   /* USER CODE BEGIN 2 */
 196:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* USER CODE END 2 */
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* Infinite loop */
 201:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 202:Src/main.c    **** 
 203:Src/main.c    ****   while (1)
 204:Src/main.c    ****   {
 205:Src/main.c    ****     /* USER CODE END WHILE */
 206:Src/main.c    **** 
 207:Src/main.c    ****     /* USER CODE BEGIN 3 */
 208:Src/main.c    ****     if (HC_SR04_GetDistance() < 100)
 209:Src/main.c    ****     {
 210:Src/main.c    ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 211:Src/main.c    ****     }
 212:Src/main.c    ****     else
 213:Src/main.c    ****     {
 214:Src/main.c    ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 215:Src/main.c    ****     }
 216:Src/main.c    **** 
 217:Src/main.c    ****     HAL_Delay(100);
 218:Src/main.c    ****   }
 219:Src/main.c    ****   /* USER CODE END 3 */
 220:Src/main.c    **** }
 221:Src/main.c    **** 
 222:Src/main.c    **** /**
 223:Src/main.c    ****   * @brief System Clock Configuration
 224:Src/main.c    ****   * @retval None
 225:Src/main.c    ****   */
 226:Src/main.c    **** void SystemClock_Config(void)
 227:Src/main.c    **** {
 377              		.loc 1 227 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 64
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381 0000 30B5     		push	{r4, r5, lr}
 382              	.LCFI4:
 383              		.cfi_def_cfa_offset 12
 384              		.cfi_offset 4, -12
 385              		.cfi_offset 5, -8
ARM GAS  /tmp/ccHn8d2e.s 			page 12


 386              		.cfi_offset 14, -4
 387 0002 91B0     		sub	sp, sp, #68
 388              	.LCFI5:
 389              		.cfi_def_cfa_offset 80
 228:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 390              		.loc 1 228 0
 391 0004 2822     		movs	r2, #40
 392 0006 0021     		movs	r1, #0
 393 0008 06A8     		add	r0, sp, #24
 394 000a FFF7FEFF 		bl	memset
 395              	.LVL43:
 229:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 396              		.loc 1 229 0
 397 000e 0024     		movs	r4, #0
 398 0010 0194     		str	r4, [sp, #4]
 399 0012 0294     		str	r4, [sp, #8]
 400 0014 0394     		str	r4, [sp, #12]
 401 0016 0494     		str	r4, [sp, #16]
 402 0018 0594     		str	r4, [sp, #20]
 230:Src/main.c    **** 
 231:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 232:Src/main.c    ****   */
 233:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 403              		.loc 1 233 0
 404 001a 0123     		movs	r3, #1
 405 001c 0693     		str	r3, [sp, #24]
 234:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 406              		.loc 1 234 0
 407 001e 4FF4A022 		mov	r2, #327680
 408 0022 0792     		str	r2, [sp, #28]
 235:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 236:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 409              		.loc 1 236 0
 410 0024 0A93     		str	r3, [sp, #40]
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 411              		.loc 1 237 0
 412 0026 0225     		movs	r5, #2
 413 0028 0D95     		str	r5, [sp, #52]
 238:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 414              		.loc 1 238 0
 415 002a 4FF48033 		mov	r3, #65536
 416 002e 0E93     		str	r3, [sp, #56]
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 417              		.loc 1 239 0
 418 0030 4FF4E013 		mov	r3, #1835008
 419 0034 0F93     		str	r3, [sp, #60]
 240:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 420              		.loc 1 240 0
 421 0036 06A8     		add	r0, sp, #24
 422 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 423              	.LVL44:
 241:Src/main.c    ****   {
 242:Src/main.c    ****     Error_Handler();
 243:Src/main.c    ****   }
 244:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 245:Src/main.c    ****   */
 246:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  /tmp/ccHn8d2e.s 			page 13


 424              		.loc 1 246 0
 425 003c 0F23     		movs	r3, #15
 426 003e 0193     		str	r3, [sp, #4]
 247:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 248:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 427              		.loc 1 248 0
 428 0040 0295     		str	r5, [sp, #8]
 249:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 429              		.loc 1 249 0
 430 0042 0394     		str	r4, [sp, #12]
 250:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 431              		.loc 1 250 0
 432 0044 4FF48063 		mov	r3, #1024
 433 0048 0493     		str	r3, [sp, #16]
 251:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 434              		.loc 1 251 0
 435 004a 0594     		str	r4, [sp, #20]
 252:Src/main.c    **** 
 253:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 436              		.loc 1 253 0
 437 004c 2946     		mov	r1, r5
 438 004e 01A8     		add	r0, sp, #4
 439 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 440              	.LVL45:
 254:Src/main.c    ****   {
 255:Src/main.c    ****     Error_Handler();
 256:Src/main.c    ****   }
 257:Src/main.c    **** }
 441              		.loc 1 257 0
 442 0054 11B0     		add	sp, sp, #68
 443              	.LCFI6:
 444              		.cfi_def_cfa_offset 12
 445              		@ sp needed
 446 0056 30BD     		pop	{r4, r5, pc}
 447              		.cfi_endproc
 448              	.LFE69:
 450              		.section	.text.main,"ax",%progbits
 451              		.align	1
 452              		.global	main
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu softvfp
 458              	main:
 459              	.LFB68:
 170:Src/main.c    ****   /* USER CODE BEGIN 1 */
 460              		.loc 1 170 0
 461              		.cfi_startproc
 462              		@ Volatile: function does not return.
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465 0000 08B5     		push	{r3, lr}
 466              	.LCFI7:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 3, -8
 469              		.cfi_offset 14, -4
 179:Src/main.c    **** 
ARM GAS  /tmp/ccHn8d2e.s 			page 14


 470              		.loc 1 179 0
 471 0002 FFF7FEFF 		bl	HAL_Init
 472              	.LVL46:
 186:Src/main.c    **** 
 473              		.loc 1 186 0
 474 0006 FFF7FEFF 		bl	SystemClock_Config
 475              	.LVL47:
 193:Src/main.c    ****   MX_TIM2_Init();
 476              		.loc 1 193 0
 477 000a FFF7FEFF 		bl	MX_GPIO_Init
 478              	.LVL48:
 194:Src/main.c    ****   /* USER CODE BEGIN 2 */
 479              		.loc 1 194 0
 480 000e FFF7FEFF 		bl	MX_TIM2_Init
 481              	.LVL49:
 196:Src/main.c    **** 
 482              		.loc 1 196 0
 483 0012 0B48     		ldr	r0, .L52
 484 0014 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 485              	.LVL50:
 486 0018 07E0     		b	.L50
 487              	.L48:
 214:Src/main.c    ****     }
 488              		.loc 1 214 0
 489 001a 0122     		movs	r2, #1
 490 001c 0221     		movs	r1, #2
 491 001e 0948     		ldr	r0, .L52+4
 492 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 493              	.LVL51:
 494              	.L49:
 217:Src/main.c    ****   }
 495              		.loc 1 217 0
 496 0024 6420     		movs	r0, #100
 497 0026 FFF7FEFF 		bl	HAL_Delay
 498              	.LVL52:
 499              	.L50:
 208:Src/main.c    ****     {
 500              		.loc 1 208 0
 501 002a FFF7FEFF 		bl	HC_SR04_GetDistance
 502              	.LVL53:
 503 002e 6328     		cmp	r0, #99
 504 0030 F3D8     		bhi	.L48
 210:Src/main.c    ****     }
 505              		.loc 1 210 0
 506 0032 0022     		movs	r2, #0
 507 0034 0221     		movs	r1, #2
 508 0036 0348     		ldr	r0, .L52+4
 509 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 510              	.LVL54:
 511 003c F2E7     		b	.L49
 512              	.L53:
 513 003e 00BF     		.align	2
 514              	.L52:
 515 0040 00000000 		.word	htim2
 516 0044 00080140 		.word	1073809408
 517              		.cfi_endproc
 518              	.LFE68:
ARM GAS  /tmp/ccHn8d2e.s 			page 15


 520              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 521              		.align	1
 522              		.global	HAL_TIM_PeriodElapsedCallback
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu softvfp
 528              	HAL_TIM_PeriodElapsedCallback:
 529              	.LFB70:
 258:Src/main.c    **** 
 259:Src/main.c    **** /* USER CODE BEGIN 4 */
 260:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *tim_baseHandle)
 261:Src/main.c    **** {
 530              		.loc 1 261 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535              	.LVL55:
 262:Src/main.c    ****   // if (tim_baseHandle->Instance == htim2.Instance)
 263:Src/main.c    ****   {
 264:Src/main.c    ****     if (++g_timerMs >= 1000000)
 536              		.loc 1 264 0
 537 0000 054A     		ldr	r2, .L56
 538 0002 1368     		ldr	r3, [r2]
 539 0004 0133     		adds	r3, r3, #1
 540 0006 1360     		str	r3, [r2]
 541 0008 044A     		ldr	r2, .L56+4
 542 000a 9342     		cmp	r3, r2
 543 000c 02D9     		bls	.L54
 265:Src/main.c    ****     {
 266:Src/main.c    ****       g_timerMs = 0;
 544              		.loc 1 266 0
 545 000e 0022     		movs	r2, #0
 546 0010 014B     		ldr	r3, .L56
 547 0012 1A60     		str	r2, [r3]
 548              	.L54:
 549 0014 7047     		bx	lr
 550              	.L57:
 551 0016 00BF     		.align	2
 552              	.L56:
 553 0018 00000000 		.word	.LANCHOR2
 554 001c 3F420F00 		.word	999999
 555              		.cfi_endproc
 556              	.LFE70:
 558              		.section	.text.Error_Handler,"ax",%progbits
 559              		.align	1
 560              		.global	Error_Handler
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu softvfp
 566              	Error_Handler:
 567              	.LFB71:
 267:Src/main.c    ****     }
 268:Src/main.c    ****   }
 269:Src/main.c    **** }
ARM GAS  /tmp/ccHn8d2e.s 			page 16


 270:Src/main.c    **** 
 271:Src/main.c    **** /* USER CODE END 4 */
 272:Src/main.c    **** 
 273:Src/main.c    **** /**
 274:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 275:Src/main.c    ****   * @retval None
 276:Src/main.c    ****   */
 277:Src/main.c    **** void Error_Handler(void)
 278:Src/main.c    **** {
 568              		.loc 1 278 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573 0000 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE71:
 577              		.section	.bss.distances.5919,"aw",%nobits
 578              		.align	2
 579              		.set	.LANCHOR1,. + 0
 582              	distances.5919:
 583 0000 00000000 		.space	20
 583      00000000 
 583      00000000 
 583      00000000 
 583      00000000 
 584              		.section	.bss.g_timerMs,"aw",%nobits
 585              		.align	2
 586              		.set	.LANCHOR2,. + 0
 589              	g_timerMs:
 590 0000 00000000 		.space	4
 591              		.section	.data.current.5920,"aw",%progbits
 592              		.align	2
 593              		.set	.LANCHOR0,. + 0
 596              	current.5920:
 597 0000 FFFFFFFF 		.word	-1
 598              		.text
 599              	.Letext0:
 600              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 601              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 602              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 603              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 604              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 605              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 606              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 607              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 608              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 609              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 610              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 611              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 612              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 613              		.file 15 "Inc/tim.h"
 614              		.file 16 "Inc/gpio.h"
ARM GAS  /tmp/ccHn8d2e.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccHn8d2e.s:16     .text.DelayUs:0000000000000000 $t
     /tmp/ccHn8d2e.s:22     .text.DelayUs:0000000000000000 DelayUs
     /tmp/ccHn8d2e.s:65     .text.DelayUs:0000000000000020 $d
     /tmp/ccHn8d2e.s:70     .text.HC_SR04_Read:0000000000000000 $t
     /tmp/ccHn8d2e.s:76     .text.HC_SR04_Read:0000000000000000 HC_SR04_Read
     /tmp/ccHn8d2e.s:183    .text.HC_SR04_Read:000000000000008c $d
     /tmp/ccHn8d2e.s:192    .text.HC_SR04_GetDistance:0000000000000000 $t
     /tmp/ccHn8d2e.s:198    .text.HC_SR04_GetDistance:0000000000000000 HC_SR04_GetDistance
     /tmp/ccHn8d2e.s:361    .text.HC_SR04_GetDistance:00000000000000a0 $d
     /tmp/ccHn8d2e.s:368    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccHn8d2e.s:375    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccHn8d2e.s:451    .text.main:0000000000000000 $t
     /tmp/ccHn8d2e.s:458    .text.main:0000000000000000 main
     /tmp/ccHn8d2e.s:515    .text.main:0000000000000040 $d
     /tmp/ccHn8d2e.s:521    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccHn8d2e.s:528    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccHn8d2e.s:553    .text.HAL_TIM_PeriodElapsedCallback:0000000000000018 $d
     /tmp/ccHn8d2e.s:559    .text.Error_Handler:0000000000000000 $t
     /tmp/ccHn8d2e.s:566    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccHn8d2e.s:578    .bss.distances.5919:0000000000000000 $d
     /tmp/ccHn8d2e.s:582    .bss.distances.5919:0000000000000000 distances.5919
     /tmp/ccHn8d2e.s:585    .bss.g_timerMs:0000000000000000 $d
     /tmp/ccHn8d2e.s:589    .bss.g_timerMs:0000000000000000 g_timerMs
     /tmp/ccHn8d2e.s:592    .data.current.5920:0000000000000000 $d
     /tmp/ccHn8d2e.s:596    .data.current.5920:0000000000000000 current.5920
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GetTick
HAL_GPIO_ReadPin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_TIM2_Init
HAL_TIM_Base_Start_IT
HAL_Delay
htim2
