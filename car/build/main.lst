ARM GAS  /tmp/ccpN6JBj.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.DelayUs,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	DelayUs:
  23              	.LFB65:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "tim.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/ccpN6JBj.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** #define HC_SR04_INVALID_DISTANCE	UINT32_MAX
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** #define ARRAYSIZE(a)  (sizeof(a) / sizeof((a)[0]))
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN PV */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END PV */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  53:Src/main.c    **** void SystemClock_Config(void);
  54:Src/main.c    **** /* USER CODE BEGIN PFP */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PFP */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  59:Src/main.c    **** /* USER CODE BEGIN 0 */
  60:Src/main.c    **** static uint32_t DelayUs(uint32_t us)
  61:Src/main.c    **** {
  25              		.loc 1 61 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  62:Src/main.c    ****   if (us == 0)
  37              		.loc 1 62 0
  38 0002 0546     		mov	r5, r0
  39 0004 08B9     		cbnz	r0, .L7
  40              	.LVL1:
  41              	.L2:
  63:Src/main.c    ****   {
  64:Src/main.c    ****     return 0;
  65:Src/main.c    ****   }
  66:Src/main.c    ****   else
  67:Src/main.c    ****   {
  68:Src/main.c    ****     uint32_t startMs = HAL_GetTick();
  69:Src/main.c    ****     uint32_t startUs = SysTick->VAL;
  70:Src/main.c    ****     uint32_t endMs = 0;
  71:Src/main.c    ****     uint32_t endUs = 0;
  72:Src/main.c    ****     uint32_t timeUs = 0;
  73:Src/main.c    **** 
  74:Src/main.c    ****     do
ARM GAS  /tmp/ccpN6JBj.s 			page 3


  75:Src/main.c    ****     {
  76:Src/main.c    ****       endMs = HAL_GetTick();
  77:Src/main.c    ****       endUs = SysTick->VAL;
  78:Src/main.c    ****       timeUs = (endMs - startMs) * 1000 + ((startUs >= endUs) ? (startUs - endUs) : (startUs + SysT
  79:Src/main.c    ****     } while (timeUs < us);
  80:Src/main.c    **** 
  81:Src/main.c    ****     return timeUs;
  82:Src/main.c    ****   }
  83:Src/main.c    **** }
  42              		.loc 1 83 0
  43 0006 2846     		mov	r0, r5
  44 0008 70BD     		pop	{r4, r5, r6, pc}
  45              	.LVL2:
  46              	.L7:
  47              	.LBB2:
  68:Src/main.c    ****     uint32_t startUs = SysTick->VAL;
  48              		.loc 1 68 0
  49 000a FFF7FEFF 		bl	HAL_GetTick
  50              	.LVL3:
  51 000e 0646     		mov	r6, r0
  52              	.LVL4:
  69:Src/main.c    ****     uint32_t endMs = 0;
  53              		.loc 1 69 0
  54 0010 104B     		ldr	r3, .L9
  55 0012 9C68     		ldr	r4, [r3, #8]
  56              	.LVL5:
  57 0014 0AE0     		b	.L5
  58              	.LVL6:
  59              	.L3:
  78:Src/main.c    ****     } while (timeUs < us);
  60              		.loc 1 78 0 discriminator 2
  61 0016 0F49     		ldr	r1, .L9
  62 0018 4868     		ldr	r0, [r1, #4]
  63 001a 2044     		add	r0, r0, r4
  64 001c C01A     		subs	r0, r0, r3
  65 001e 0E4B     		ldr	r3, .L9+4
  66              	.LVL7:
  67 0020 A3FB0030 		umull	r3, r0, r3, r0
  68 0024 0009     		lsrs	r0, r0, #4
  69              	.L4:
  78:Src/main.c    ****     } while (timeUs < us);
  70              		.loc 1 78 0 is_stmt 0 discriminator 4
  71 0026 1044     		add	r0, r0, r2
  72              	.LVL8:
  79:Src/main.c    **** 
  73              		.loc 1 79 0 is_stmt 1 discriminator 4
  74 0028 8542     		cmp	r5, r0
  75 002a 10D9     		bls	.L8
  76              	.LVL9:
  77              	.L5:
  76:Src/main.c    ****       endUs = SysTick->VAL;
  78              		.loc 1 76 0
  79 002c FFF7FEFF 		bl	HAL_GetTick
  80              	.LVL10:
  77:Src/main.c    ****       timeUs = (endMs - startMs) * 1000 + ((startUs >= endUs) ? (startUs - endUs) : (startUs + SysT
  81              		.loc 1 77 0
  82 0030 084B     		ldr	r3, .L9
ARM GAS  /tmp/ccpN6JBj.s 			page 4


  83 0032 9B68     		ldr	r3, [r3, #8]
  84              	.LVL11:
  78:Src/main.c    ****     } while (timeUs < us);
  85              		.loc 1 78 0
  86 0034 801B     		subs	r0, r0, r6
  87              	.LVL12:
  88 0036 4FF47A72 		mov	r2, #1000
  89 003a 02FB00F2 		mul	r2, r2, r0
  90 003e 9C42     		cmp	r4, r3
  91 0040 E9D3     		bcc	.L3
  78:Src/main.c    ****     } while (timeUs < us);
  92              		.loc 1 78 0 is_stmt 0 discriminator 1
  93 0042 E01A     		subs	r0, r4, r3
  94 0044 044B     		ldr	r3, .L9+4
  95              	.LVL13:
  96 0046 A3FB0030 		umull	r3, r0, r3, r0
  97 004a 0009     		lsrs	r0, r0, #4
  98 004c EBE7     		b	.L4
  99              	.LVL14:
 100              	.L8:
  81:Src/main.c    ****   }
 101              		.loc 1 81 0 is_stmt 1
 102 004e 0546     		mov	r5, r0
 103              	.LVL15:
 104 0050 D9E7     		b	.L2
 105              	.L10:
 106 0052 00BF     		.align	2
 107              	.L9:
 108 0054 10E000E0 		.word	-536813552
 109 0058 398EE338 		.word	954437177
 110              	.LBE2:
 111              		.cfi_endproc
 112              	.LFE65:
 114              		.section	.text.HC_SR04_Read,"ax",%progbits
 115              		.align	1
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu softvfp
 121              	HC_SR04_Read:
 122              	.LFB66:
  84:Src/main.c    **** 
  85:Src/main.c    **** static uint32_t HC_SR04_Read(void)
  86:Src/main.c    **** {
 123              		.loc 1 86 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127 0000 38B5     		push	{r3, r4, r5, lr}
 128              	.LCFI1:
 129              		.cfi_def_cfa_offset 16
 130              		.cfi_offset 3, -16
 131              		.cfi_offset 4, -12
 132              		.cfi_offset 5, -8
 133              		.cfi_offset 14, -4
 134              	.LVL16:
  87:Src/main.c    ****   uint32_t startMs = 0;
ARM GAS  /tmp/ccpN6JBj.s 			page 5


  88:Src/main.c    ****   uint32_t startUs = 0;
  89:Src/main.c    ****   uint32_t endMs = 0;
  90:Src/main.c    ****   uint32_t endUs = 0;
  91:Src/main.c    ****   uint32_t timeUs = 0;
  92:Src/main.c    ****   GPIO_PinState echo = GPIO_PIN_RESET;
  93:Src/main.c    **** 
  94:Src/main.c    ****   HAL_GPIO_WritePin(HC_SR04_TRIG_GPIO_Port, HC_SR04_TRIG_Pin, GPIO_PIN_SET);
 135              		.loc 1 94 0
 136 0002 264C     		ldr	r4, .L21
 137 0004 0122     		movs	r2, #1
 138 0006 1021     		movs	r1, #16
 139 0008 2046     		mov	r0, r4
 140 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 141              	.LVL17:
  95:Src/main.c    ****   DelayUs(20);
 142              		.loc 1 95 0
 143 000e 1420     		movs	r0, #20
 144 0010 FFF7FEFF 		bl	DelayUs
 145              	.LVL18:
  96:Src/main.c    ****   HAL_GPIO_WritePin(HC_SR04_TRIG_GPIO_Port, HC_SR04_TRIG_Pin, GPIO_PIN_RESET);
 146              		.loc 1 96 0
 147 0014 0022     		movs	r2, #0
 148 0016 1021     		movs	r1, #16
 149 0018 2046     		mov	r0, r4
 150 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 151              	.LVL19:
  97:Src/main.c    **** 
  98:Src/main.c    ****   startMs = HAL_GetTick();
 152              		.loc 1 98 0
 153 001e FFF7FEFF 		bl	HAL_GetTick
 154              	.LVL20:
 155 0022 0546     		mov	r5, r0
 156              	.LVL21:
 157              	.L13:
  99:Src/main.c    ****   do
 100:Src/main.c    ****   {
 101:Src/main.c    ****     echo = HAL_GPIO_ReadPin(HC_SR04_ECHO_GPIO_Port, HC_SR04_ECHO_Pin);
 158              		.loc 1 101 0 discriminator 2
 159 0024 2021     		movs	r1, #32
 160 0026 1D48     		ldr	r0, .L21
 161 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 162              	.LVL22:
 102:Src/main.c    ****   } while ((GPIO_PIN_RESET == echo) && (HAL_GetTick() < startMs + 1));
 163              		.loc 1 102 0 discriminator 2
 164 002c 0446     		mov	r4, r0
 165 002e 20B9     		cbnz	r0, .L12
 166              		.loc 1 102 0 is_stmt 0 discriminator 1
 167 0030 FFF7FEFF 		bl	HAL_GetTick
 168              	.LVL23:
 169 0034 6B1C     		adds	r3, r5, #1
 170 0036 9842     		cmp	r0, r3
 171 0038 F4D3     		bcc	.L13
 172              	.L12:
 103:Src/main.c    **** 
 104:Src/main.c    ****   if (GPIO_PIN_RESET == echo)
 173              		.loc 1 104 0 is_stmt 1
 174 003a 14B9     		cbnz	r4, .L20
ARM GAS  /tmp/ccpN6JBj.s 			page 6


 105:Src/main.c    ****   {
 106:Src/main.c    ****     return HC_SR04_INVALID_DISTANCE;
 175              		.loc 1 106 0
 176 003c 4FF0FF30 		mov	r0, #-1
 107:Src/main.c    ****   }
 108:Src/main.c    ****   else
 109:Src/main.c    ****   {
 110:Src/main.c    ****     startMs = HAL_GetTick();
 111:Src/main.c    ****     startUs = SysTick->VAL;
 112:Src/main.c    ****     while (GPIO_PIN_SET == HAL_GPIO_ReadPin(HC_SR04_ECHO_GPIO_Port, HC_SR04_ECHO_Pin));
 113:Src/main.c    ****     endMs = HAL_GetTick();
 114:Src/main.c    ****     endUs = SysTick->VAL;
 115:Src/main.c    ****     timeUs = (endMs - startMs) * 1000 + ((startUs >= endUs) ? (startUs - endUs) : (startUs + SysTic
 116:Src/main.c    **** 
 117:Src/main.c    ****     return timeUs * 170 / 1000;
 118:Src/main.c    ****   }
 119:Src/main.c    **** }
 177              		.loc 1 119 0
 178 0040 38BD     		pop	{r3, r4, r5, pc}
 179              	.LVL24:
 180              	.L20:
 110:Src/main.c    ****     startUs = SysTick->VAL;
 181              		.loc 1 110 0
 182 0042 FFF7FEFF 		bl	HAL_GetTick
 183              	.LVL25:
 184 0046 0546     		mov	r5, r0
 185              	.LVL26:
 111:Src/main.c    ****     while (GPIO_PIN_SET == HAL_GPIO_ReadPin(HC_SR04_ECHO_GPIO_Port, HC_SR04_ECHO_Pin));
 186              		.loc 1 111 0
 187 0048 154B     		ldr	r3, .L21+4
 188 004a 9C68     		ldr	r4, [r3, #8]
 189              	.LVL27:
 190              	.L15:
 112:Src/main.c    ****     endMs = HAL_GetTick();
 191              		.loc 1 112 0 discriminator 1
 192 004c 2021     		movs	r1, #32
 193 004e 1348     		ldr	r0, .L21
 194 0050 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 195              	.LVL28:
 196 0054 0128     		cmp	r0, #1
 197 0056 F9D0     		beq	.L15
 113:Src/main.c    ****     endUs = SysTick->VAL;
 198              		.loc 1 113 0
 199 0058 FFF7FEFF 		bl	HAL_GetTick
 200              	.LVL29:
 114:Src/main.c    ****     timeUs = (endMs - startMs) * 1000 + ((startUs >= endUs) ? (startUs - endUs) : (startUs + SysTic
 201              		.loc 1 114 0
 202 005c 104B     		ldr	r3, .L21+4
 203 005e 9A68     		ldr	r2, [r3, #8]
 204              	.LVL30:
 115:Src/main.c    **** 
 205              		.loc 1 115 0
 206 0060 401B     		subs	r0, r0, r5
 207              	.LVL31:
 208 0062 4FF47A73 		mov	r3, #1000
 209 0066 03FB00F0 		mul	r0, r3, r0
 210 006a 9442     		cmp	r4, r2
ARM GAS  /tmp/ccpN6JBj.s 			page 7


 211 006c 0DD3     		bcc	.L16
 115:Src/main.c    **** 
 212              		.loc 1 115 0 is_stmt 0 discriminator 1
 213 006e A31A     		subs	r3, r4, r2
 214 0070 0C4A     		ldr	r2, .L21+8
 215              	.LVL32:
 216 0072 A2FB0323 		umull	r2, r3, r2, r3
 217 0076 1B09     		lsrs	r3, r3, #4
 218              	.L17:
 115:Src/main.c    **** 
 219              		.loc 1 115 0 discriminator 4
 220 0078 0344     		add	r3, r3, r0
 221              	.LVL33:
 117:Src/main.c    ****   }
 222              		.loc 1 117 0 is_stmt 1 discriminator 4
 223 007a AA20     		movs	r0, #170
 224 007c 00FB03F0 		mul	r0, r0, r3
 225 0080 094B     		ldr	r3, .L21+12
 226              	.LVL34:
 227 0082 A3FB0030 		umull	r3, r0, r3, r0
 228 0086 8009     		lsrs	r0, r0, #6
 229 0088 38BD     		pop	{r3, r4, r5, pc}
 230              	.LVL35:
 231              	.L16:
 115:Src/main.c    **** 
 232              		.loc 1 115 0 discriminator 2
 233 008a 054B     		ldr	r3, .L21+4
 234 008c 5B68     		ldr	r3, [r3, #4]
 235 008e 2344     		add	r3, r3, r4
 236 0090 9B1A     		subs	r3, r3, r2
 237 0092 044A     		ldr	r2, .L21+8
 238              	.LVL36:
 239 0094 A2FB0323 		umull	r2, r3, r2, r3
 240 0098 1B09     		lsrs	r3, r3, #4
 241 009a EDE7     		b	.L17
 242              	.L22:
 243              		.align	2
 244              	.L21:
 245 009c 00080140 		.word	1073809408
 246 00a0 10E000E0 		.word	-536813552
 247 00a4 398EE338 		.word	954437177
 248 00a8 D34D6210 		.word	274877907
 249              		.cfi_endproc
 250              	.LFE66:
 252              		.section	.text.HC_SR04_GetDistance,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu softvfp
 259              	HC_SR04_GetDistance:
 260              	.LFB67:
 120:Src/main.c    **** 
 121:Src/main.c    **** static uint32_t HC_SR04_GetDistance(void)
 122:Src/main.c    **** {
 261              		.loc 1 122 0
 262              		.cfi_startproc
ARM GAS  /tmp/ccpN6JBj.s 			page 8


 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 38B5     		push	{r3, r4, r5, lr}
 266              	.LCFI2:
 267              		.cfi_def_cfa_offset 16
 268              		.cfi_offset 3, -16
 269              		.cfi_offset 4, -12
 270              		.cfi_offset 5, -8
 271              		.cfi_offset 14, -4
 272              	.LVL37:
 123:Src/main.c    ****   static uint32_t distances[] = {0, 0, 0, 0, 0};
 124:Src/main.c    ****   static size_t current = UINT32_MAX;
 125:Src/main.c    ****   size_t minIdx = 0;
 126:Src/main.c    ****   size_t maxIdx = 0;
 127:Src/main.c    ****   size_t count = 0;
 128:Src/main.c    ****   uint32_t sum = 0;
 129:Src/main.c    **** 
 130:Src/main.c    ****   if (current >= ARRAYSIZE(distances))
 273              		.loc 1 130 0
 274 0002 294B     		ldr	r3, .L45
 275 0004 1C68     		ldr	r4, [r3]
 276 0006 042C     		cmp	r4, #4
 277 0008 10D9     		bls	.L41
 278 000a 0024     		movs	r4, #0
 279 000c 05E0     		b	.L24
 280              	.LVL38:
 281              	.L26:
 282              	.LBB3:
 131:Src/main.c    ****   {
 132:Src/main.c    ****     for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 133:Src/main.c    ****     {
 134:Src/main.c    ****       distances[i] = HC_SR04_Read();
 283              		.loc 1 134 0 discriminator 3
 284 000e FFF7FEFF 		bl	HC_SR04_Read
 285              	.LVL39:
 286 0012 264B     		ldr	r3, .L45+4
 287 0014 43F82400 		str	r0, [r3, r4, lsl #2]
 132:Src/main.c    ****     {
 288              		.loc 1 132 0 discriminator 3
 289 0018 0134     		adds	r4, r4, #1
 290              	.LVL40:
 291              	.L24:
 132:Src/main.c    ****     {
 292              		.loc 1 132 0 is_stmt 0 discriminator 1
 293 001a 042C     		cmp	r4, #4
 294 001c F7D9     		bls	.L26
 295              	.LBE3:
 135:Src/main.c    ****     }
 136:Src/main.c    ****     current = 0;
 296              		.loc 1 136 0 is_stmt 1
 297 001e 0022     		movs	r2, #0
 298 0020 214B     		ldr	r3, .L45
 299 0022 1A60     		str	r2, [r3]
 300              	.LVL41:
 301              	.L27:
 302              	.LBB4:
 137:Src/main.c    ****   }
ARM GAS  /tmp/ccpN6JBj.s 			page 9


 138:Src/main.c    ****   else
 139:Src/main.c    ****   {
 140:Src/main.c    ****     distances[current] = HC_SR04_Read();
 141:Src/main.c    ****     if (++current >= ARRAYSIZE(distances))
 142:Src/main.c    ****     {
 143:Src/main.c    ****       current = 0;
 144:Src/main.c    ****     }
 145:Src/main.c    ****   }
 146:Src/main.c    **** 
 147:Src/main.c    ****   minIdx = 0;
 148:Src/main.c    ****   maxIdx = 0;
 149:Src/main.c    ****   for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 303              		.loc 1 149 0
 304 0024 0023     		movs	r3, #0
 305              	.LBE4:
 148:Src/main.c    ****   for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 306              		.loc 1 148 0
 307 0026 1C46     		mov	r4, r3
 147:Src/main.c    ****   maxIdx = 0;
 308              		.loc 1 147 0
 309 0028 1946     		mov	r1, r3
 310              	.LBB5:
 311              		.loc 1 149 0
 312 002a 10E0     		b	.L28
 313              	.LVL42:
 314              	.L41:
 315              	.LBE5:
 140:Src/main.c    ****     if (++current >= ARRAYSIZE(distances))
 316              		.loc 1 140 0
 317 002c FFF7FEFF 		bl	HC_SR04_Read
 318              	.LVL43:
 319 0030 1E4B     		ldr	r3, .L45+4
 320 0032 43F82400 		str	r0, [r3, r4, lsl #2]
 141:Src/main.c    ****     {
 321              		.loc 1 141 0
 322 0036 1C4A     		ldr	r2, .L45
 323 0038 1368     		ldr	r3, [r2]
 324 003a 0133     		adds	r3, r3, #1
 325 003c 1360     		str	r3, [r2]
 326 003e 042B     		cmp	r3, #4
 327 0040 F0D9     		bls	.L27
 143:Src/main.c    ****     }
 328              		.loc 1 143 0
 329 0042 0022     		movs	r2, #0
 330 0044 184B     		ldr	r3, .L45
 331 0046 1A60     		str	r2, [r3]
 332 0048 ECE7     		b	.L27
 333              	.LVL44:
 334              	.L36:
 335              	.LBB6:
 150:Src/main.c    ****   {
 151:Src/main.c    ****     if (distances[i] < distances[minIdx])
 152:Src/main.c    ****     {
 153:Src/main.c    ****       minIdx = i;
 336              		.loc 1 153 0
 337 004a 1946     		mov	r1, r3
 338              	.LVL45:
ARM GAS  /tmp/ccpN6JBj.s 			page 10


 339              	.L29:
 149:Src/main.c    ****   {
 340              		.loc 1 149 0 discriminator 2
 341 004c 0133     		adds	r3, r3, #1
 342              	.LVL46:
 343              	.L28:
 149:Src/main.c    ****   {
 344              		.loc 1 149 0 is_stmt 0 discriminator 1
 345 004e 042B     		cmp	r3, #4
 346 0050 0DD8     		bhi	.L42
 151:Src/main.c    ****     {
 347              		.loc 1 151 0 is_stmt 1
 348 0052 164A     		ldr	r2, .L45+4
 349 0054 52F82300 		ldr	r0, [r2, r3, lsl #2]
 350 0058 52F82120 		ldr	r2, [r2, r1, lsl #2]
 351 005c 9042     		cmp	r0, r2
 352 005e F4D3     		bcc	.L36
 154:Src/main.c    ****     }
 155:Src/main.c    ****     else
 156:Src/main.c    ****     {
 157:Src/main.c    ****       if (distances[i] > distances[maxIdx])
 353              		.loc 1 157 0
 354 0060 124A     		ldr	r2, .L45+4
 355 0062 52F82420 		ldr	r2, [r2, r4, lsl #2]
 356 0066 9042     		cmp	r0, r2
 357 0068 F0D9     		bls	.L29
 158:Src/main.c    ****       {
 159:Src/main.c    ****         maxIdx = i;
 358              		.loc 1 159 0
 359 006a 1C46     		mov	r4, r3
 360              	.LVL47:
 361 006c EEE7     		b	.L29
 362              	.LVL48:
 363              	.L42:
 364 006e 0023     		movs	r3, #0
 365              	.LVL49:
 366 0070 1846     		mov	r0, r3
 367 0072 1D46     		mov	r5, r3
 368 0074 00E0     		b	.L31
 369              	.LVL50:
 370              	.L32:
 371              	.LBE6:
 372              	.LBB7:
 160:Src/main.c    ****       }
 161:Src/main.c    ****     }
 162:Src/main.c    ****   }
 163:Src/main.c    **** 
 164:Src/main.c    ****   count = 0;
 165:Src/main.c    ****   sum = 0;
 166:Src/main.c    ****   for (size_t i = 0; i < ARRAYSIZE(distances); ++i)
 373              		.loc 1 166 0 discriminator 2
 374 0076 0133     		adds	r3, r3, #1
 375              	.LVL51:
 376              	.L31:
 377              		.loc 1 166 0 is_stmt 0 discriminator 1
 378 0078 042B     		cmp	r3, #4
 379 007a 0CD8     		bhi	.L43
ARM GAS  /tmp/ccpN6JBj.s 			page 11


 167:Src/main.c    ****   {
 168:Src/main.c    ****     if ((i != minIdx) && (i != maxIdx) && (distances[i] != HC_SR04_INVALID_DISTANCE))
 380              		.loc 1 168 0 is_stmt 1
 381 007c 9942     		cmp	r1, r3
 382 007e FAD0     		beq	.L32
 383              		.loc 1 168 0 is_stmt 0 discriminator 1
 384 0080 9C42     		cmp	r4, r3
 385 0082 F8D0     		beq	.L32
 386              		.loc 1 168 0 discriminator 2
 387 0084 094A     		ldr	r2, .L45+4
 388 0086 52F82320 		ldr	r2, [r2, r3, lsl #2]
 389 008a B2F1FF3F 		cmp	r2, #-1
 390 008e F2D0     		beq	.L32
 169:Src/main.c    ****     {
 170:Src/main.c    ****       ++count;
 391              		.loc 1 170 0 is_stmt 1
 392 0090 0135     		adds	r5, r5, #1
 393              	.LVL52:
 171:Src/main.c    ****       sum += distances[i];
 394              		.loc 1 171 0
 395 0092 1044     		add	r0, r0, r2
 396              	.LVL53:
 397 0094 EFE7     		b	.L32
 398              	.L43:
 399              	.LBE7:
 172:Src/main.c    ****     }
 173:Src/main.c    ****   }
 174:Src/main.c    **** 
 175:Src/main.c    ****   if (count >= 3)
 400              		.loc 1 175 0
 401 0096 022D     		cmp	r5, #2
 402 0098 02D8     		bhi	.L44
 176:Src/main.c    ****   {
 177:Src/main.c    **** 	return sum / count;
 178:Src/main.c    ****   }
 179:Src/main.c    ****   else
 180:Src/main.c    ****   {
 181:Src/main.c    **** 	return HC_SR04_INVALID_DISTANCE;
 403              		.loc 1 181 0
 404 009a 4FF0FF30 		mov	r0, #-1
 405              	.LVL54:
 182:Src/main.c    ****   }
 183:Src/main.c    **** }
 406              		.loc 1 183 0
 407 009e 38BD     		pop	{r3, r4, r5, pc}
 408              	.LVL55:
 409              	.L44:
 177:Src/main.c    ****   }
 410              		.loc 1 177 0
 411 00a0 B0FBF5F0 		udiv	r0, r0, r5
 412              	.LVL56:
 413 00a4 38BD     		pop	{r3, r4, r5, pc}
 414              	.LVL57:
 415              	.L46:
 416 00a6 00BF     		.align	2
 417              	.L45:
 418 00a8 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccpN6JBj.s 			page 12


 419 00ac 00000000 		.word	.LANCHOR1
 420              		.cfi_endproc
 421              	.LFE67:
 423              		.section	.text.SystemClock_Config,"ax",%progbits
 424              		.align	1
 425              		.global	SystemClock_Config
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
 429              		.fpu softvfp
 431              	SystemClock_Config:
 432              	.LFB69:
 184:Src/main.c    **** /* USER CODE END 0 */
 185:Src/main.c    **** 
 186:Src/main.c    **** /**
 187:Src/main.c    ****   * @brief  The application entry point.
 188:Src/main.c    ****   * @retval int
 189:Src/main.c    ****   */
 190:Src/main.c    **** int main(void)
 191:Src/main.c    **** {
 192:Src/main.c    ****   /* USER CODE BEGIN 1 */
 193:Src/main.c    **** 
 194:Src/main.c    ****   /* USER CODE END 1 */
 195:Src/main.c    ****   
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 198:Src/main.c    **** 
 199:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 200:Src/main.c    ****   HAL_Init();
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* USER CODE BEGIN Init */
 203:Src/main.c    **** 
 204:Src/main.c    ****   /* USER CODE END Init */
 205:Src/main.c    **** 
 206:Src/main.c    ****   /* Configure the system clock */
 207:Src/main.c    ****   SystemClock_Config();
 208:Src/main.c    **** 
 209:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 210:Src/main.c    **** 
 211:Src/main.c    ****   /* USER CODE END SysInit */
 212:Src/main.c    **** 
 213:Src/main.c    ****   /* Initialize all configured peripherals */
 214:Src/main.c    ****   MX_GPIO_Init();
 215:Src/main.c    ****   MX_TIM3_Init();
 216:Src/main.c    ****   /* USER CODE BEGIN 2 */
 217:Src/main.c    **** 
 218:Src/main.c    ****   /* USER CODE END 2 */
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* Infinite loop */
 221:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 222:Src/main.c    ****   while (1)
 223:Src/main.c    ****   {
 224:Src/main.c    ****     /* USER CODE END WHILE */
 225:Src/main.c    **** 
 226:Src/main.c    ****     /* USER CODE BEGIN 3 */
 227:Src/main.c    ****     uint32_t distance = HC_SR04_GetDistance();
 228:Src/main.c    **** 
ARM GAS  /tmp/ccpN6JBj.s 			page 13


 229:Src/main.c    ****     if (distance < 100)
 230:Src/main.c    ****     {
 231:Src/main.c    ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 232:Src/main.c    ****     }
 233:Src/main.c    ****     else
 234:Src/main.c    ****     {
 235:Src/main.c    ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 236:Src/main.c    ****     }
 237:Src/main.c    **** 
 238:Src/main.c    ****     HAL_Delay(10);
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /* USER CODE END 3 */
 241:Src/main.c    **** }
 242:Src/main.c    **** 
 243:Src/main.c    **** /**
 244:Src/main.c    ****   * @brief System Clock Configuration
 245:Src/main.c    ****   * @retval None
 246:Src/main.c    ****   */
 247:Src/main.c    **** void SystemClock_Config(void)
 248:Src/main.c    **** {
 433              		.loc 1 248 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 64
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437 0000 30B5     		push	{r4, r5, lr}
 438              	.LCFI3:
 439              		.cfi_def_cfa_offset 12
 440              		.cfi_offset 4, -12
 441              		.cfi_offset 5, -8
 442              		.cfi_offset 14, -4
 443 0002 91B0     		sub	sp, sp, #68
 444              	.LCFI4:
 445              		.cfi_def_cfa_offset 80
 249:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 446              		.loc 1 249 0
 447 0004 2822     		movs	r2, #40
 448 0006 0021     		movs	r1, #0
 449 0008 06A8     		add	r0, sp, #24
 450 000a FFF7FEFF 		bl	memset
 451              	.LVL58:
 250:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 452              		.loc 1 250 0
 453 000e 0024     		movs	r4, #0
 454 0010 0194     		str	r4, [sp, #4]
 455 0012 0294     		str	r4, [sp, #8]
 456 0014 0394     		str	r4, [sp, #12]
 457 0016 0494     		str	r4, [sp, #16]
 458 0018 0594     		str	r4, [sp, #20]
 251:Src/main.c    **** 
 252:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 253:Src/main.c    ****   */
 254:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 459              		.loc 1 254 0
 460 001a 0122     		movs	r2, #1
 461 001c 0692     		str	r2, [sp, #24]
 255:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 462              		.loc 1 255 0
ARM GAS  /tmp/ccpN6JBj.s 			page 14


 463 001e 4FF48033 		mov	r3, #65536
 464 0022 0793     		str	r3, [sp, #28]
 256:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 257:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 465              		.loc 1 257 0
 466 0024 0A92     		str	r2, [sp, #40]
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 467              		.loc 1 258 0
 468 0026 0225     		movs	r5, #2
 469 0028 0D95     		str	r5, [sp, #52]
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 470              		.loc 1 259 0
 471 002a 0E93     		str	r3, [sp, #56]
 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 472              		.loc 1 260 0
 473 002c 4FF4E013 		mov	r3, #1835008
 474 0030 0F93     		str	r3, [sp, #60]
 261:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 475              		.loc 1 261 0
 476 0032 06A8     		add	r0, sp, #24
 477 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 478              	.LVL59:
 262:Src/main.c    ****   {
 263:Src/main.c    ****     Error_Handler();
 264:Src/main.c    ****   }
 265:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 266:Src/main.c    ****   */
 267:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 479              		.loc 1 267 0
 480 0038 0F23     		movs	r3, #15
 481 003a 0193     		str	r3, [sp, #4]
 268:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 269:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 482              		.loc 1 269 0
 483 003c 0295     		str	r5, [sp, #8]
 270:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 484              		.loc 1 270 0
 485 003e 0394     		str	r4, [sp, #12]
 271:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 486              		.loc 1 271 0
 487 0040 4FF48063 		mov	r3, #1024
 488 0044 0493     		str	r3, [sp, #16]
 272:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 489              		.loc 1 272 0
 490 0046 0594     		str	r4, [sp, #20]
 273:Src/main.c    **** 
 274:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 491              		.loc 1 274 0
 492 0048 2946     		mov	r1, r5
 493 004a 01A8     		add	r0, sp, #4
 494 004c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 495              	.LVL60:
 275:Src/main.c    ****   {
 276:Src/main.c    ****     Error_Handler();
 277:Src/main.c    ****   }
 278:Src/main.c    **** }
 496              		.loc 1 278 0
ARM GAS  /tmp/ccpN6JBj.s 			page 15


 497 0050 11B0     		add	sp, sp, #68
 498              	.LCFI5:
 499              		.cfi_def_cfa_offset 12
 500              		@ sp needed
 501 0052 30BD     		pop	{r4, r5, pc}
 502              		.cfi_endproc
 503              	.LFE69:
 505              		.section	.text.main,"ax",%progbits
 506              		.align	1
 507              		.global	main
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
 511              		.fpu softvfp
 513              	main:
 514              	.LFB68:
 191:Src/main.c    ****   /* USER CODE BEGIN 1 */
 515              		.loc 1 191 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519 0000 08B5     		push	{r3, lr}
 520              	.LCFI6:
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 3, -8
 523              		.cfi_offset 14, -4
 200:Src/main.c    **** 
 524              		.loc 1 200 0
 525 0002 FFF7FEFF 		bl	HAL_Init
 526              	.LVL61:
 207:Src/main.c    **** 
 527              		.loc 1 207 0
 528 0006 FFF7FEFF 		bl	SystemClock_Config
 529              	.LVL62:
 214:Src/main.c    ****   MX_TIM3_Init();
 530              		.loc 1 214 0
 531 000a FFF7FEFF 		bl	MX_GPIO_Init
 532              	.LVL63:
 215:Src/main.c    ****   /* USER CODE BEGIN 2 */
 533              		.loc 1 215 0
 534 000e FFF7FEFF 		bl	MX_TIM3_Init
 535              	.LVL64:
 536 0012 07E0     		b	.L52
 537              	.LVL65:
 538              	.L50:
 539              	.LBB8:
 235:Src/main.c    ****     }
 540              		.loc 1 235 0
 541 0014 0122     		movs	r2, #1
 542 0016 0221     		movs	r1, #2
 543 0018 0748     		ldr	r0, .L54
 544              	.LVL66:
 545 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 546              	.LVL67:
 547              	.L51:
 238:Src/main.c    ****   }
 548              		.loc 1 238 0
ARM GAS  /tmp/ccpN6JBj.s 			page 16


 549 001e 0A20     		movs	r0, #10
 550 0020 FFF7FEFF 		bl	HAL_Delay
 551              	.LVL68:
 552              	.L52:
 227:Src/main.c    **** 
 553              		.loc 1 227 0
 554 0024 FFF7FEFF 		bl	HC_SR04_GetDistance
 555              	.LVL69:
 229:Src/main.c    ****     {
 556              		.loc 1 229 0
 557 0028 6328     		cmp	r0, #99
 558 002a F3D8     		bhi	.L50
 231:Src/main.c    ****     }
 559              		.loc 1 231 0
 560 002c 0022     		movs	r2, #0
 561 002e 0221     		movs	r1, #2
 562 0030 0148     		ldr	r0, .L54
 563              	.LVL70:
 564 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 565              	.LVL71:
 566 0036 F2E7     		b	.L51
 567              	.L55:
 568              		.align	2
 569              	.L54:
 570 0038 00080140 		.word	1073809408
 571              	.LBE8:
 572              		.cfi_endproc
 573              	.LFE68:
 575              		.section	.text.Error_Handler,"ax",%progbits
 576              		.align	1
 577              		.global	Error_Handler
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 581              		.fpu softvfp
 583              	Error_Handler:
 584              	.LFB70:
 279:Src/main.c    **** 
 280:Src/main.c    **** /* USER CODE BEGIN 4 */
 281:Src/main.c    **** 
 282:Src/main.c    **** /* USER CODE END 4 */
 283:Src/main.c    **** 
 284:Src/main.c    **** /**
 285:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 286:Src/main.c    ****   * @retval None
 287:Src/main.c    ****   */
 288:Src/main.c    **** void Error_Handler(void)
 289:Src/main.c    **** {
 585              		.loc 1 289 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590 0000 7047     		bx	lr
 591              		.cfi_endproc
 592              	.LFE70:
 594              		.section	.bss.distances.5924,"aw",%nobits
ARM GAS  /tmp/ccpN6JBj.s 			page 17


 595              		.align	2
 596              		.set	.LANCHOR1,. + 0
 599              	distances.5924:
 600 0000 00000000 		.space	20
 600      00000000 
 600      00000000 
 600      00000000 
 600      00000000 
 601              		.section	.data.current.5925,"aw",%progbits
 602              		.align	2
 603              		.set	.LANCHOR0,. + 0
 606              	current.5925:
 607 0000 FFFFFFFF 		.word	-1
 608              		.text
 609              	.Letext0:
 610              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 611              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 612              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 613              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 614              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 615              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 616              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 617              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 618              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 619              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 620              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 621              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 622              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 623              		.file 15 "Inc/tim.h"
 624              		.file 16 "Inc/gpio.h"
ARM GAS  /tmp/ccpN6JBj.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccpN6JBj.s:16     .text.DelayUs:0000000000000000 $t
     /tmp/ccpN6JBj.s:22     .text.DelayUs:0000000000000000 DelayUs
     /tmp/ccpN6JBj.s:108    .text.DelayUs:0000000000000054 $d
     /tmp/ccpN6JBj.s:115    .text.HC_SR04_Read:0000000000000000 $t
     /tmp/ccpN6JBj.s:121    .text.HC_SR04_Read:0000000000000000 HC_SR04_Read
     /tmp/ccpN6JBj.s:245    .text.HC_SR04_Read:000000000000009c $d
     /tmp/ccpN6JBj.s:253    .text.HC_SR04_GetDistance:0000000000000000 $t
     /tmp/ccpN6JBj.s:259    .text.HC_SR04_GetDistance:0000000000000000 HC_SR04_GetDistance
     /tmp/ccpN6JBj.s:418    .text.HC_SR04_GetDistance:00000000000000a8 $d
     /tmp/ccpN6JBj.s:424    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccpN6JBj.s:431    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccpN6JBj.s:506    .text.main:0000000000000000 $t
     /tmp/ccpN6JBj.s:513    .text.main:0000000000000000 main
     /tmp/ccpN6JBj.s:570    .text.main:0000000000000038 $d
     /tmp/ccpN6JBj.s:576    .text.Error_Handler:0000000000000000 $t
     /tmp/ccpN6JBj.s:583    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccpN6JBj.s:595    .bss.distances.5924:0000000000000000 $d
     /tmp/ccpN6JBj.s:599    .bss.distances.5924:0000000000000000 distances.5924
     /tmp/ccpN6JBj.s:602    .data.current.5925:0000000000000000 $d
     /tmp/ccpN6JBj.s:606    .data.current.5925:0000000000000000 current.5925
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_TIM3_Init
HAL_Delay
